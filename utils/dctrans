#!/usr/bin/env ruby

require 'yaml'

$data = YAML.load( File.open('constant.yml').read )

$dc_ins = $data[:instructions]

$dc_reg = $data[:registers]

$dc_unit = $data[:units]

def build_ins(ins,params,context)
  weightq = $data[:weights];  ## param_count, param_1, param_2, param_3
  params.each do |e|
    e[:value]=determine_value(e,context)
  end
  params.unshift({ :type => params.size })
  return "%08x" % [weightq.zip(params).reduce(ins) { |sum,e|  e[1] ? sum + $dc_unit[ e[1][:type] ]*(1 << e[0]) : sum }]
end

def determine_value(e,context)
  case e[:type]
    when "@".to_sym
      determine_scope(e,context);
    when "$".to_sym     
      determine_var(e,context);
    when "&".to_sym
      determine_scope(e,context);
    when "\\".to_sym
      determine_fcall(e,context)
    else
      determine_literal(e)    ## literals
    end
end

def determine_var(e,context)
  if $dc_reg[ e[:value].strip.to_sym ]
    $dc_reg[ e[:value].strip.to_sym ]
  else
    nil
  end
end

def determine_scope(e,context)
  if context[:scope][ e[:value].strip.to_sym ]
    context[:scope][ e[:value].strip.to_sym ] - 1
  else
    nil
  end
end

def determine_fcall(e,context)
  context[:caller][ e[:value].strip.to_sym ] = e[:pos]
  context[:scope][ e[:value].strip.to_sym ] - e[:pos] -1
end

def determine_literal(e)
  case e[:value]
    when /^[+-]?(\d+)$/
      e[:type] = :identi
      e[:value].to_i
    else
      if e[:value] =~ /^(\w+)$/
        e[:type] = :reg
        $dc_reg[$1.to_sym]
      else
        0
      end
  end
end

def dump_ins(ins)
  bytes = []
  (0...4).each do |e|
    bytes << ins[e*2,2]
  end
  p bytes
  bytes.each do | byte |
    byte.gsub!('.','f')
    $out.putc (eval ("0x#{byte}"))
  end
end

$in  = File.open(ARGV[0] || "a.dc.asm","r")
$out = File.open(ARGV[1] || "a.out", "wb") 

$context = {
  :scope => {},
  :count => 0,
  :caller => {}
}

$in.each_line do |line|
  if line =~ /^\s*(\w+)\s*:\s*(;.*)?$/
    $context[:scope][$1.strip.to_sym] = $context[:count];
  else
    $context[:count] += line.split(';')[0].split(/[\s,]/).select {|tok| tok =~ /^\S+$/}.length
  end
end

$context[:count] = 0

$in.pos = 0

$in.each_line do |line|
  unless line =~ /^\s*(\w+)\s*:\s*(;.*)?$/
    if line =~ /^\s*(\w+)\s*([^;\n]*);?/   ## <instruction>  [<params>,]*2[<param>]
      puts line
      orig_pos = $context[:count];
      ins = build_ins( 

        ## instruction
          $dc_ins[$1.to_sym],

        ## instruction params
          params = $2.split(/\s*,\s*/).map { |v| 
            v.strip =~ /([$\\\#@\%\^&])?(.*)/;
            {:type => ( $1 ? $1.to_sym : $1 ),:value => $2, :pos => (orig_pos+=1) }
          },

        ## execution context
          $context)
      dump_ins(ins);
      params.each do | param |
        dump_ins( "%08x" % [ param[:value] ] ) if param[:value];
      end
    end
    $context[:count] += line.split(';')[0].split(/[\s,]/).select {|tok| tok =~ /^\S+$/}.length
  end
end